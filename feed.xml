<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
	<channel>
		<title>Andy Gradl</title>
		<description>a blog about random dev related stuff</description>
		<link>http://agradl.github.io/</link>
		
			<item>
				<title>docker, docker-compose errors when working with non-TLS swarm</title>
				<description>&lt;p&gt;The Docker toolbox for Mac OS-X worked perfectly, until I went to work with our private docker swarm host.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Error response from daemon: client is newer than server (client API version: 1.22, server API version: 1.20)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As the error suggests, your client is newer than your server. Most suggestions involved simply updating the server. Not too helpful if that decision is out of your control. Luckily if you installed the latest toolbox version, they&#39;ve introduced a new environment flag to downgrade your api version &lt;code&gt;export DOCKER_API_VERSION=&quot;1.20&quot;&lt;/code&gt; did the trick.&lt;/p&gt;

&lt;p&gt;Not so fast.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;An error occurred trying to connect: Get https://your-server:2375/v1.20/containers/json: tls: oversized record received with length 20527&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;See the problem? Neither did I at first. Those more familiar with docker swarm will realize that port 2375 is for http and 2376 is for https. Our in house swarm doesn&#39;t use https yet docker is trying to connect with it. Eventually I get things to work in a new terminal window and discover what the issue is. I was using the terminal opened from the docker toolbox quickstart which helpfully sets some necessary environment variables to connect to the local boot2docker VM using TLS.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;env | grep DOCKER&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;DOCKER_HOST=tcp://your-server:2375
DOCKER_API_VERSION=1.20
DOCKER_TLS_VERIFY=1
DOCKER_CERT_PATH=/Users/agradl/.docker/machine/machines/default
DOCKER_MACHINE_NAME=default&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;unset DOCKER_TLS_VERIFY &amp;amp;&amp;amp; unset DOCKER_CERT_PATH&lt;/code&gt; and then I&#39;m back in business. I can &lt;code&gt;docker ps&lt;/code&gt; like a boss. Now I&#39;m ready to deploy my container to the swarm. &lt;code&gt;docker-compose -f my-service.yml -p my-service up&lt;/code&gt; to deploy and... deja vu.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Error response from daemon: client is newer than server (client API version: 1.22, server API version: 1.20)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By this point I&#39;m pretty confused. After some intense googling, I see mention that &lt;code&gt;docker-compose&lt;/code&gt; is bundled with a separate &lt;code&gt;docker&lt;/code&gt; binary! Apparently this bundled version doesn&#39;t use the &lt;code&gt;DOCKER_API_VERSION&lt;/code&gt; environment variable. Giving up on the installed versions, I finally give in and just downgrade &lt;code&gt;docker-compose&lt;/code&gt; using &lt;code&gt;curl -L https://github.com/docker/compose/releases/download/1.5.2/docker-compose-`uname -s`-`uname -m` &amp;gt; /usr/local/bin/docker-compose&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Despite all these problems, I was thoroughly impressed with how seamless the toolbox install worked and got me up and running. After downloading it I was creating containers and running a Dockerfile in minutes. Quite a different experience from when I last tried it about a year ago.&lt;/p&gt;
</description>
				<published>2016-02-24 00:00:00 -0700</published>
				<link>http://agradl.github.io//docker/2016/02/24/docker-and-docker-compose-errors-when-working-with-non-tls-swarm/</link>
			</item>
		
			<item>
				<title>Getting around github pages safe mode jekyll restrictions</title>
				<description>&lt;p&gt;One of the first surprises most people encounter when hosting their website on &lt;a href=&quot;https://pages.github.com/&quot;&gt;github pages&lt;/a&gt; is that &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; doesn&#39;t work quite the as they expect. This is because they run a safe mode jekyll configuration with a &lt;a href=&quot;https://help.github.com/articles/using-jekyll-plugins-with-github-pages/&quot;&gt;whitelist of plugins&lt;/a&gt; for you to use. Since jekyll generates a static website, this is easy to work around by just generating your website locally and then pushing just the static site to github pages.&lt;/p&gt;

&lt;p&gt;To get started you&#39;ll want to have the following:
+ some form of ruby, I prefer using &lt;a href=&quot;https://rvm.io/&quot;&gt;rvm&lt;/a&gt; to manage multiple ruby versions
+ &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt; locally installed&lt;/p&gt;

&lt;p&gt;Then create your jekyll site in a new branch of your repository. This is where you will make future changes to the site.&lt;/p&gt;

&lt;p&gt;To deploy your site to github pages, you can perform the following steps or just put them in a shell script for repeated use.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-bash&#39;&gt;jekyll build
cp ./_config.yml ./_site/_config.yml
cp ./CNAME ./_site/CNAME
cd _site
git init
git add --all
git commit -m &amp;quot;update&amp;quot;
git push -f https://github.com/agradl/agradl.github.io.git master
cd ../
rm -rf _site&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Note: if this is for a project page, then instead of pushing to the &lt;strong&gt;master&lt;/strong&gt; branch, you should be pushing to the &lt;strong&gt;gh-pages&lt;/strong&gt; branch.&lt;/p&gt;
</description>
				<published>2015-04-03 00:00:00 -0600</published>
				<link>http://agradl.github.io//gh-pages/2015/04/03/Getting-around-github-pages-safe-mode-jekyll-restrictions/</link>
			</item>
		
			<item>
				<title>Using async await and TcpClient TcpServer</title>
				<description>&lt;p&gt;Some time ago, I tried to implement a simple tcp server using the System.Net.Sockets classes, TcpClient and TcpServer. While building a synchronous server was straight forward, it was a little awkward to use the old Begin/End async methods. Having to use callbacks for everything asynchronous leads to more methods and harder to read code.&lt;/p&gt;

&lt;p&gt;For instance, accepting new clients might look something like this&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;private TcpListener _listener;
private void AcceptNewClients()
{
    _listener.BeginAcceptTcpClient(EndAcceptNewClients, null);
}

private void EndAcceptNewClients(IAsyncResult ar)
{
    var client = _listener.EndAcceptTcpClient(ar);
    var player = new Player(client);
    PlayerQueue.Enqueue(player);
    ActivePlayers.TryAdd(player.Id, player);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It doesn&#39;t look too bad, but once you start considering variable scopes and error handling, the callback method approach starts to feel like a burden.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;private async void AcceptNewClients()
{
    var listener = new TcpListener(IPAddress.Any, Port);
    while (true)
    {
        TcpClient client = await listener.AcceptTcpClientAsync();
        var player = new Player(client);
        PlayerQueue.Enqueue(player);
        ActivePlayers.TryAdd(player.Id, player);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Using the new async keyword on my method, I can simply use await and the Async method to inline the callback. These two pieces are functionally equivalent. Its important to realize that when we await the AcceptTcpClientAsync method, our code does not block the thread, so other useful things can continue running while the connection is established.&lt;/p&gt;

&lt;p&gt;If you&#39;re interested in seeing more on async await or TcpClient/TcpListener take a look at the TcpSample repository on my github. The biggest takeaway I had from working on this project was that async only starts to show its benefits when you are dealing with longer running external tasks and that debugging multi threaded programs is hard.&lt;/p&gt;
</description>
				<published>2013-02-19 00:00:00 -0700</published>
				<link>http://agradl.github.io//.net/game/tcp/2013/02/19/using-async-await-and-TcpClient-TcpServer/</link>
			</item>
		
			<item>
				<title>Mvc Enum Dropdown with validation</title>
				<description>&lt;p&gt;A very frequent question I see is how to make working with dropdown lists easy. Most of the solutions you can find involve a quick and dirty approach. I say dirty because it appears to solve the problem, but really leaves you without server validation.&lt;/p&gt;

&lt;p&gt;Sure you can pass a SelectList to your view through the ViewBag or a property on the model, but it really only solves half the problem. An ideal solution is hidden from your view and controller and requires only decorating your model with an attribute.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;public class ModelWithEnumField
{
    [EnumDropDown(typeof(Status))]
    public Status CurrentStatus { get; set; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Providing the available options for the dropdown and the validation can be handled within the attribute using the enum&#39;s type for its possible values. This could also be easily extended to have separate text for the SelectListItem Text and Value properties, using attributes on the enum itself.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;[AttributeUsage(AttributeTargets.Property)]
public class EnumDropDownAttribute : ValidationAttribute, IMetadataAware
{
    public Type EnumType { get; set; }

    public EnumDropDownAttribute(Type enumType)
    {
        EnumType = enumType;
        ErrorMessage = &amp;quot;The submitted value for {0} was not in the list of expected options&amp;quot;;
    }

    public void OnMetadataCreated(ModelMetadata metadata)
    {
        metadata.TemplateHint = &amp;quot;EnumDropdown&amp;quot;;
        var selectItems = GetValues()
            .Select(x =&amp;gt; new SelectListItem
                             {
                                 Text = x,
                                 Value = x
                             });
        metadata.AdditionalValues[&amp;quot;EnumValues&amp;quot;] = selectItems;
    }

    private IEnumerable&amp;lt;string&amp;gt; GetValues()
    {
        return Enum
            .GetValues(EnumType)
            .Cast&amp;lt;object&amp;gt;()
            .Select(x =&amp;gt; x.ToString());
    } 

    public override bool IsValid(object value)
    {
        if (value == null || !(value is string))
            return true;
        return GetValues().Any(x =&amp;gt; x == value as string);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Above, I inherit from the ValidationAttribute so that I get server model validation without additional code in my controller. I could also use a string for the property type on my model and it would be validated just the same. The IMetadataAware interface ensures that my attribute will be called to provide meta data before the model&#39;s view is selected. The TemplateHint property basically does the same thing as either of the following.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;[DataType(&amp;quot;EnumDropdown&amp;quot;)]
[UIHint(&amp;quot;EnumDropdown&amp;quot;)]
@Html.EditorFor(m=&amp;gt;m.CurrentStatus,&amp;quot;EditorTemplates/EnumDropdown&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And finally, I create a generic dropdown list template under Views\Shared\EditorTemplates\EnumDropdown.cshtml&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;@model object
@{
    var values = (ViewData.ModelMetadata.AdditionalValues[&amp;quot;EnumValues&amp;quot;] as IEnumerable&amp;lt;SelectListItem&amp;gt;);
}
@Html.DropDownListFor(m =&amp;gt; m, values)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<published>2013-02-13 00:00:00 -0700</published>
				<link>http://agradl.github.io//asp.net/mvc/2013/02/13/Mvc-Enum-Dropdown-with-validation/</link>
			</item>
		
			<item>
				<title>Exploring the Textarea element</title>
				<description>&lt;p&gt;If you have ever found yourself implementing some kind of editor in javascript using the textarea element, you might find &lt;a href=&quot;/resources/TextareaExplorer.html&quot;&gt;this little tool&lt;/a&gt; useful.  I put it together as I was building a WSIWYG editor for this blog. Sure there&#39;s plenty of pre built solutions out there  which have more features than I can even think of (or use), but the whole point is to learn something.&lt;/p&gt;

&lt;p&gt;If you happen to be using jQuery, I would strongly recommend taking a look at the &lt;a href=&quot;https://github.com/localhost/jquery-fieldselection&quot;&gt;fieldselection plugin&lt;/a&gt;. It basically abstracts the browser specific quirks away from you, so you can focus on manipulating the contents of the textarea.&lt;/p&gt;

&lt;p&gt;As for the tool I built, it was useful to see how textareas behave in different browsers and inspect the contents of the textarea easily.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/resources/TextareaExplorer.html&quot;&gt;Textarea Explorer&lt;/a&gt;&lt;/p&gt;
</description>
				<published>2013-01-22 00:00:00 -0700</published>
				<link>http://agradl.github.io//javascript/2013/01/22/Exploring-the-Textarea-element/</link>
			</item>
		
			<item>
				<title>Tfs Build Template Test Category Filter</title>
				<description>&lt;p&gt;Build automation is a great feature of Tfs 2010, but when you start adding a significant number of unit tests and especially integration tests, the build process begins to drag. Luckily there&#39;s built in support for this sort of issue.&lt;/p&gt;

&lt;p&gt;The DefaultBuildTemplate.xaml has a field under the Test Assembly options called &quot;Category Filter&quot;. The value of this field is used for the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/ms182489.aspx#category&quot;&gt;/category&lt;/a&gt; switch when the Build Controller runs MSTest.exe on your solution.&lt;/p&gt;

&lt;p&gt;So now when you write your MSTests and decorate the method with the appropriate attribute, you can filter out longer running tests depending on the the build.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;[TestMethod]
[TestCategory(&amp;quot;Integration&amp;quot;)]
public void Create()
{
    _controller.Create();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And the Build Definition property value&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;Category Filter : !Integration&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<published>2012-12-21 00:00:00 -0700</published>
				<link>http://agradl.github.io//.net/tfs/2012/12/21/Tfs-Build-Template-Test-Category-Filter/</link>
			</item>
		
			<item>
				<title>Javascript RegExp Global, Character, and Meta (part 2)</title>
				<description>&lt;h3&gt;Global Modifier&lt;/h3&gt;

&lt;p&gt;Use the global modifier when you want to operate on all cases and not just the first.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;quot;123example123&amp;quot;.match(/2/g) // yields [&amp;quot;2&amp;quot;, &amp;quot;2&amp;quot;]
&amp;quot;123example123&amp;quot;.replace(/2/g,&amp;quot;-&amp;quot;) // yields &amp;quot;1-3example1-3&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Character classes&lt;/h3&gt;

&lt;p&gt;Character classes are a way to match a single character. They can be defined using a set of criteria within the square brackets [ and ] or selected from some special pre-made classes which are declared using meta characters.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;#39;123digit123&amp;#39;.replace(/\d/g,&amp;#39;-&amp;#39;); //yields &amp;quot;---digit---&amp;quot;
&amp;#39;123digit123&amp;#39;.replace(/[0-9]/g,&amp;#39;-&amp;#39;); //same&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Meta characters&lt;/h3&gt;

&lt;p&gt;Not all characters are treated equally and many times their location determines their meaning. Within a character class, the carrot ^ in the first position reverses the meaning of the entire class.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;#39;123nondigit123&amp;#39;.replace(/[^0-9]/g,&amp;#39;-&amp;#39;); // &amp;quot;123--------123&amp;quot;
&amp;#39;123nondigit123&amp;#39;.replace(/\D/g,&amp;#39;-&amp;#39;); // same
&amp;#39;123digit^and^carrot123&amp;#39;.replace(/[0-9^]/g,&amp;#39;-&amp;#39;) // &amp;quot;---digit-and-carrot---&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<published>2012-09-06 00:00:00 -0600</published>
				<link>http://agradl.github.io//javascript/2012/09/06/Javascript-RegExp-Global-Character-and-Meta-part-2/</link>
			</item>
		
			<item>
				<title>Windsor Sorted Array Resolver</title>
				<description>&lt;p&gt;I recently had an array that was being resolved by Windsor. Instead of wrapping it inside of another class to do the sorting work, I moved the work to be a part of my dependency injection convention.&lt;/p&gt;

&lt;p&gt;Using the sub resolver below, the array comes out sorted and my dependent class doesn&#39;t need to mess around with an intermediary sorting class.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;public class SortedArrayResolver : ISubDependencyResolver
{
    private readonly bool allowEmptyCollections;
    private readonly Func&amp;lt;object, object, int&amp;gt; _orderFunc;
    private readonly IKernel kernel;

    public SortedArrayResolver(IKernel kernel, bool allowEmptyCollections = false, Func&amp;lt;object, object, int&amp;gt; orderFunc = null)
    {
        this.kernel = kernel;
        this.allowEmptyCollections = allowEmptyCollections;
        _orderFunc = orderFunc;
    }

    public virtual bool CanResolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model,
                                   DependencyModel dependency)
    {
        if (dependency.TargetItemType == null)
        {
            return false;
        }
        Type itemType = GetItemType(dependency.TargetItemType);
        if (itemType != null &amp;amp;&amp;amp; !HasParameter(dependency))
        {
            return CanSatisfy(itemType);
        }
        return false;
    }

    public virtual object Resolve(CreationContext context, ISubDependencyResolver contextHandlerResolver, ComponentModel model,
                                  DependencyModel dependency)
    {
        Array result = kernel.ResolveAll(GetItemType(dependency.TargetItemType), null);
        if (_orderFunc != null)
        {
            Array.Sort(result, new GenericComparer(_orderFunc));
        }
        return result;
    }

    public class GenericComparer : IComparer
    {
        private readonly Func&amp;lt;object, object, int&amp;gt; _comparer;

        public GenericComparer(Func&amp;lt;object, object, int&amp;gt; comparer)
        {
            _comparer = comparer;
        }

        public int Compare(object x, object y)
        {
            return _comparer(x, y);
        }
    }

    public virtual bool CanSatisfy(Type itemType)
    {
        return allowEmptyCollections || kernel.HasComponent(itemType);
    }

    public Type GetItemType(Type targetItemType)
    {
        return targetItemType.IsArray ? targetItemType.GetElementType() : null;
    }

    private static bool HasParameter(DependencyModel dependency)
    {
        return dependency.Parameter != null;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Then the usage is as simple as passing it a comparison function and all resolved arrays will be sorted using the specified function. Note: the sub resolver is not used when container.ResolveAll(Type) is called.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;public static class Program
{
    public static void Main()
    {
        var container = new WindsorContainer();
        container.Kernel.Resolver.AddSubResolver(new SortedArrayResolver(container.Kernel, true, SortFunction));
        container.Register(AllTypes.FromAssemblyContaining&amp;lt;ILetter&amp;gt;()
                               .BasedOn&amp;lt;ILetter&amp;gt;()
                               .WithServiceFirstInterface())
            .Register(Component.For&amp;lt;LetterPrinter&amp;gt;());

        var printer = container.Resolve&amp;lt;LetterPrinter&amp;gt;();
        printer.Print();

        //var array = container.ResolveAll&amp;lt;ILetter&amp;gt;(); 
        
        // resolve all does not use the SortedArrayResolver
        //  since it is not actually resolving an array object
        //  it resolves all components matching the service and 
        //  builds an array from the results

    }

    //sorted array resolver sorts ascending
    //so we invert the result to get the desired effect
    private static int SortFunction(object x, object y)
    {
        return -1*(x.GetImportance() - y.GetImportance());
    }

    public static int GetImportance(this object obj)
    {
        var attr = (ImportanceAttribute)Attribute.GetCustomAttribute(obj.GetType(), typeof(ImportanceAttribute));
        return (attr == null) ? ImportanceAttribute.Default : attr.Importance;
    }
}

public class LetterPrinter
{
    private readonly ILetter[] _letters;

    public LetterPrinter(ILetter[] letters)
    {
        _letters = letters;
    }

    public void Print()
    {
        foreach (var letter in _letters)
        {
            Console.WriteLine(letter.GetType());
        }
    }
}

public class ImportanceAttribute : Attribute
{
    public ImportanceAttribute(int importance = 3)
    {
        Importance = importance;
    }

    public int Importance { get; set; }

    public static int Default { get { return 3; } }
}

public interface ILetter { }
[Importance(5)]
public class K : ILetter { }
[Importance(7)]
public class O : ILetter { }
[Importance(8)]
public class W : ILetter { }
[Importance(6)]
public class R : ILetter { }
[Importance(9)]
public class T : ILetter { }
[Importance(10)]
public class I : ILetter { }
public class D : ILetter { }
[Importance(4)]
public class E : ILetter { }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
				<published>2012-09-05 00:00:00 -0600</published>
				<link>http://agradl.github.io//.net/2012/09/05/Windsor-Sorted-Array-Resolver/</link>
			</item>
		
			<item>
				<title>Javascript RegExp Intro (part 1)</title>
				<description>&lt;p&gt;In its simplest form, regex can be used just like you would use a string in the String.replace method.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;#39;somestring&amp;#39;.replace(&amp;#39;s&amp;#39;,&amp;#39;-&amp;#39;); //yields -omestring
&amp;#39;somestring&amp;#39;.replace(/s/,&amp;#39;-&amp;#39;); //same
&amp;#39;somestring&amp;#39;.replace(new RegExp(&amp;#39;s&amp;#39;,&amp;#39;&amp;#39;),&amp;#39;-&amp;#39;); //same&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This works fine for alpha numeric characters, but some characters need to be escaped using \ because they have special meaning within a regular expression.&lt;/p&gt;

&lt;p&gt;All of these examples can be run easily using your favorite browser&#39;s javascript console.&lt;/p&gt;

&lt;p&gt;Before digging further into the regular expression itself, it&#39;s a good idea to understand how they can be used.&lt;/p&gt;

&lt;h3&gt;RegExp object usage&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exec - returns the first match of the passed string in a new array, even if the global modifier is specified&lt;/p&gt;

&lt;p&gt;  &lt;div&gt;
&lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;new RegExp(&amp;#39;h&amp;#39;).exec(&amp;#39;abcdefghij&amp;#39;);   //[&amp;quot;h&amp;quot;]
/h/.exec(&amp;#39;abcdefghhj&amp;#39;);               //[&amp;quot;h&amp;quot;]
/h/g.exec(&amp;#39;abcdefghhj&amp;#39;);               //[&amp;quot;h&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;test - returns true or false depending whether a match was found&lt;/p&gt;

&lt;p&gt;  &lt;div&gt;
&lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;new RegExp(&amp;#39;h&amp;#39;).exec(&amp;#39;abcdefghij&amp;#39;)  //true
new RegExp(&amp;#39;x&amp;#39;).exec(&amp;#39;abcdefghij&amp;#39;)  //false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;strong&gt;String extension method usage&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;replace - replaces the first match (or all if using the global modifier) with the provided replacement string&lt;/p&gt;

&lt;p&gt;  &lt;div&gt;
&lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;#39;abcdefg&amp;#39;.replace(/c/,&amp;#39;-&amp;#39;) //yields ab-cdefg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;match - returns first match in an array (or all if using the global modifier)&lt;/p&gt;

&lt;p&gt;  &lt;div&gt;
&lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-javascript&#39;&gt;&amp;#39;abcdecg&amp;#39;.match(/c/) //yields [&amp;#39;c&amp;#39;]
&amp;#39;abcdecg&amp;#39;.match(/c/g) //yields [&amp;#39;c&amp;#39;,&amp;#39;c&amp;#39;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
				<published>2012-08-29 00:00:00 -0600</published>
				<link>http://agradl.github.io//javascript/2012/08/29/Javascript-RegExp-Intro-part-1/</link>
			</item>
		
			<item>
				<title>Simple object caching in .net</title>
				<description>&lt;p&gt;Asp.Net makes it very easy to cache pages, actions and resources. However, sometimes I just want to cache some different objects and I don&#39;t want to have to adjust my code much to get the benefit. I created an ObjectCache class with that in mind.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=&#39;&#39;&gt;&lt;code class=&#39;language-csharp&#39;&gt;public static class ObjectCache
    {
        private static readonly ConcurrentDictionary&amp;lt;object, CachedObject&amp;gt; 
            _cache = new ConcurrentDictionary&amp;lt;object, CachedObject&amp;gt;();

        public static T WrapAndRetrieve&amp;lt;T&amp;gt;(object key, Func&amp;lt;T&amp;gt; getNewValue, 
                                            int cacheDurationMinutes = 30)
        {
            return _cache
                .AddOrUpdate(key
                //function returning the CacheObject to add (cache miss)
                    , o =&amp;gt; new CachedObject(getNewValue(), cacheDurationMinutes)
                //function returning a new CacheObject if its expired
                    , (o, c) =&amp;gt; c.IsExpired ? 
                        new CachedObject(getNewValue(), cacheDurationMinutes) : 
                        c)
                .GetValue&amp;lt;T&amp;gt;();
        }

        public static void Expire(object key)
        {
            CachedObject obj;
            _cache.TryRemove(key, out obj);
        }
        
        public static long EstimatedSize()
        {
            long l = 0;
            foreach (var obj in _cache)
            {
                l += get_size(obj.Value.GetValue&amp;lt;object&amp;gt;());
            }
            return l;
        }

        private static long get_size(object o)
        {
            long size = 0;
            using (Stream s = new MemoryStream())
            {
                BinaryFormatter formatter = new BinaryFormatter();
                formatter.Serialize(s, o);
                return s.Length;
            }
        }

        private class CachedObject
        {
            private DateTime expiration { get; set; }
            private readonly object _value;

            public CachedObject(object value, int duration)
            {
                _value = value;
                expiration = DateTime.Now.AddMinutes(duration);
            }

            public bool IsExpired
            {
                get { return expiration &amp;lt; DateTime.Now; }
            }

            public T GetValue&amp;lt;T&amp;gt;()
            {
                return (T)_value;
            }
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since I&#39;m storing this in a static variable, its a good idea to get an estimated memory footprint. I&#39;ve included a simple object memory estimate function to give a rough idea of the memory this cache takes up. The catch is to test it out you need to mark all of the objects you plan on storing into the cache as serializable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/Simple-object-caching-in-net/footprint.jpg&quot; title=&quot;Estimated Size&quot; alt=&quot;determine memory footprint&quot; /&gt;&lt;/p&gt;
</description>
				<published>2012-05-12 00:00:00 -0600</published>
				<link>http://agradl.github.io//.net/2012/05/12/Simple-object-caching-in-net/</link>
			</item>
		
	</channel>
</rss>
